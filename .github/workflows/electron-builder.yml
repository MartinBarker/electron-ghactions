name: Build/release

on:
  workflow_dispatch:
  push:
    branches:
      - main
    tags:
      - 'v*'

jobs:
  release:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60

    env:
      is_tag: ${{ startsWith(github.ref, 'refs/tags/v') }}
      SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.SNAPCRAFT_TOKEN }}

    strategy:
      matrix:
#        os: [macos-latest, ubuntu-latest, windows-latest]
        os: [macos-latest]

    steps:
      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.tmate_enabled }}
        with:
          detached: true
  
        # Windows fix. See https://github.com/actions/checkout/issues/226
      - run: git config --global core.autocrlf false

      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Install Node.js, NPM 
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # # This global ffmpeg is used for screenshots (see below)
      # - uses: FedericoCarboni/setup-ffmpeg@v3
      #   with:
      #     ffmpeg-version: release
      #     # arm not yet supported on macos
      #     architecture: ${{ matrix.os == 'macos-latest' && 'x64' || '' }}
      #     # Linking type of the binaries. Use "shared" to download shared binaries and 
      #     # "static" for statically linked ones. Shared builds are currently only available
      #     # for windows releases. Defaults to "static"
      #     linking-type: static
      #     # As of version 3 of this action, builds are no longer downloaded from GitHub
      #     # except on Windows: https://github.com/GyanD/codexffmpeg/releases.
      #     github-token: ${{ github.server_url == 'https://github.com' && github.token || '' }}

      # - run: ffmpeg -version

      - name: (Linux) Install and login to Snapcraft
        uses: samuelmeuli/action-snapcraft@v2
        if: startsWith(matrix.os, 'ubuntu')

      - name: Save provisioning profile
        if: startsWith(matrix.os, 'macos')
        env:
          PROVISIONING_PROFILE_BASE64: ${{ secrets.PROVISIONING_PROFILE_BASE64 }}
        run: |
          echo -n "$PROVISIONING_PROFILE_BASE64" | base64 --decode > splitBySilence_macAppStore.provisionprofile
      - name: (MacOS) Prepare Apple API key
        # Import Apple API key for uploading to Mac App Store and for notarization
        if: startsWith(matrix.os, 'macos')
        run: |
          mkdir -p ~/.appstoreconnect/private_keys/
          echo '${{ secrets.APPLE_API_KEY }}' > ~/.appstoreconnect/private_keys/AuthKey_${{ secrets.APPLE_API_KEY_ID }}.p8
      
      # - name: (MacOS) Download ffmpeg
      #   if: startsWith(matrix.os, 'macos')
      #   run: |
      #     npm run download-ffmpeg-darwin-x64
      #     npm run download-ffmpeg-darwin-arm64
      # - name: (Windows) Download ffmpeg
      #   if: startsWith(matrix.os, 'windows')
      #   run: npm run download-ffmpeg-win32-x64

      # - name: (Linux) Download ffmpeg
      #   if: startsWith(matrix.os, 'ubuntu')
      #   run: npm run download-ffmpeg-linux-x64

      - name: Build/release Electron app
        uses: samuelmeuli/action-electron-builder@v1
        with:
          # GitHub token, automatically provided to the action
          # (No need to define this secret in the repo settings)
          github_token: ${{ secrets.github_token }}

          # If the commit is tagged with a version (e.g. "v1.0.0"),
          # release the app after building
          release: ${{ env.is_tag == 'true' }}

          max_attempts: 1

          mac_certs: ${{ secrets.MAC_CERTS }}
          mac_certs_password: ${{ secrets.MAC_CERTS_PASSWORD }}

        env:
          APPLE_API_KEY: ~/.appstoreconnect/private_keys/AuthKey_${{ secrets.APPLE_API_KEY_ID }}.p8
          APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
          APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}
